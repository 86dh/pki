name: CA CRL database

on: workflow_call

env:
  DS_IMAGE: ${{ vars.DS_IMAGE || 'quay.io/389ds/dirsrv' }}

jobs:
  # https://github.com/dogtagpki/pki/wiki/CA-CRL-Database
  test:
    name: Test
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    steps:
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get -y install libxml2-utils

      - name: Clone repository
        uses: actions/checkout@v4

      - name: Retrieve PKI images
        uses: actions/cache@v4
        with:
          key: pki-images-${{ github.sha }}
          path: pki-images.tar

      - name: Load PKI images
        run: docker load --input pki-images.tar

      - name: Create network
        run: docker network create example

      - name: Set up DS container
        run: |
          tests/bin/ds-create.sh \
              --image=${{ env.DS_IMAGE }} \
              --hostname=ds.example.com \
              --network=example \
              --network-alias=ds.example.com \
              --password=Secret.123 \
              ds

      - name: Set up PKI container
        run: |
          tests/bin/runner-init.sh \
              --hostname=pki.example.com \
              --network=example \
              --network-alias=pki.example.com \
              pki

      - name: Install CA
        run: |
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/ca.cfg \
              -s CA \
              -D pki_ds_url=ldap://ds.example.com:3389 \
              -v

      - name: Configure caUserCert profile
        run: |
          # set cert validity to 1 minute
          VALIDITY_DEFAULT="policyset.userCertSet.2.default.params"
          docker exec pki sed -i \
              -e "s/^$VALIDITY_DEFAULT.range=.*$/$VALIDITY_DEFAULT.range=1/" \
              -e "/^$VALIDITY_DEFAULT.range=.*$/a $VALIDITY_DEFAULT.rangeUnit=minute" \
              /var/lib/pki/pki-tomcat/conf/ca/profiles/ca/caUserCert.cfg

          # check updated profile
          docker exec pki cat /var/lib/pki/pki-tomcat/conf/ca/profiles/ca/caUserCert.cfg

      - name: Check CRL issuing points
        run: |
          docker exec pki pki-server ca-crl-ip-find

      - name: Update CRL configuration
        run: |
          # update cert status every minute
          docker exec pki pki-server ca-config-set ca.certStatusUpdateInterval 60

          # update CRL immediately after each cert revocation
          docker exec pki pki-server ca-crl-ip-mod -D alwaysUpdate=true MasterCRL

          docker exec pki pki-server ca-crl-ip-show MasterCRL

      - name: Restart CA subsystem
        run: |
          docker exec pki pki-server ca-redeploy --wait

      - name: Run PKI healthcheck
        run: docker exec pki pki-healthcheck --failures-only

      - name: Initialize PKI client
        run: |
          docker exec pki pki-server cert-export ca_signing --cert-file ca_signing.crt

          docker exec pki pki nss-cert-import \
              --cert ca_signing.crt \
              --trust CT,C,C \
              ca_signing

          docker exec pki pki pkcs12-import \
              --pkcs12 /root/.dogtag/pki-tomcat/ca_admin_cert.p12 \
              --pkcs12-password Secret.123

      - name: Check initial CRL
        run: |
          # there should be no revoked certs
          docker exec pki pki-server ca-crl-record-show MasterCRL | tee output

          sed -n \
              -e '/^\s*CRL Number:/p' \
              -e '/^\s*CRL Size:/p' \
              output > actual

          cat > expected << EOF
            CRL Number: 0x1
            CRL Size: 0
          EOF

          diff expected actual

          docker exec pki pki-server ca-crl-record-cert-find MasterCRL | tee output

          diff /dev/null output

      - name: Enroll user 1 cert
        run: |
          docker exec pki pki client-cert-request uid=testuser1 | tee output

          REQUEST_ID=$(sed -n -e 's/^ *Request ID: *\(.*\)$/\1/p' output)
          echo "REQUEST_ID: $REQUEST_ID"

          docker exec pki pki -n caadmin ca-cert-request-approve $REQUEST_ID --force | tee output
          CERT_ID=$(sed -n -e 's/^ *Certificate ID: *\(.*\)$/\1/p' output)
          echo "CERT_ID: $CERT_ID"
          echo $CERT_ID > cert.id

          docker exec pki pki ca-cert-show $CERT_ID | tee output

          # cert should be valid
          sed -n "s/^ *Status: \(.*\)$/\1/p" output > actual
          echo "VALID" > expected
          diff expected actual

      - name: Revoke user 1 cert
        run: |
          CERT_ID=$(cat cert.id)
          docker exec pki pki -n caadmin ca-cert-hold $CERT_ID --force

          docker exec pki pki ca-cert-show $CERT_ID | tee output

          # cert should be revoked
          sed -n "s/^ *Status: \(.*\)$/\1/p" output > actual
          echo "REVOKED" > expected
          diff expected actual

      - name: Check CRL after user 1 cert revocation
        run: |
          # there should be one revoked cert
          docker exec pki pki-server ca-crl-record-show MasterCRL | tee output

          sed -n \
              -e '/^\s*CRL Number:/p' \
              -e '/^\s*CRL Size:/p' \
              output > actual

          cat > expected << EOF
            CRL Number: 0x2
            CRL Size: 1
          EOF

          diff expected actual

          docker exec pki pki-server ca-crl-record-cert-find MasterCRL | tee output

          sed -n \
              -e '/^\s*Serial Number:/p' \
              -e '/^\s*Reason:/p' \
              output > actual

          CERT_ID=$(cat cert.id)
          cat > expected << EOF
            Serial Number: $CERT_ID
            Reason: CERTIFICATE_HOLD
          EOF

          diff expected actual

      - name: Unrevoke user 1 cert
        run: |
          CERT_ID=$(cat cert.id)
          docker exec pki pki -n caadmin ca-cert-release-hold $CERT_ID --force

          docker exec pki pki ca-cert-show $CERT_ID | tee output

          # cert should be valid
          sed -n "s/^ *Status: \(.*\)$/\1/p" output > actual
          echo "VALID" > expected
          diff expected actual

      - name: Check CRL after user 1 cert unrevocation
        run: |
          # there should be no revoked certs
          docker exec pki pki-server ca-crl-record-show MasterCRL | tee output

          sed -n \
              -e '/^\s*CRL Number:/p' \
              -e '/^\s*CRL Size:/p' \
              output > actual

          cat > expected << EOF
            CRL Number: 0x3
            CRL Size: 0
          EOF

          diff expected actual

          docker exec pki pki-server ca-crl-record-cert-find MasterCRL | tee output

          diff /dev/null output

      - name: Enroll user 2 cert
        run: |
          docker exec pki pki client-cert-request uid=testuser2 | tee output

          REQUEST_ID=$(sed -n -e 's/^ *Request ID: *\(.*\)$/\1/p' output)
          echo "REQUEST_ID: $REQUEST_ID"

          docker exec pki pki -n caadmin ca-cert-request-approve $REQUEST_ID --force | tee output
          CERT_ID=$(sed -n -e 's/^ *Certificate ID: *\(.*\)$/\1/p' output)
          echo "CERT_ID: $CERT_ID"
          echo $CERT_ID > cert.id

          docker exec pki pki ca-cert-show $CERT_ID | tee output

          # cert should be valid
          sed -n "s/^ *Status: \(.*\)$/\1/p" output > actual
          echo "VALID" > expected
          diff expected actual

      - name: Revoke user 2 cert
        run: |
          CERT_ID=$(cat cert.id)
          docker exec pki pki -n caadmin ca-cert-hold $CERT_ID --force

          docker exec pki pki ca-cert-show $CERT_ID | tee output

          # cert should be revoked
          sed -n "s/^ *Status: \(.*\)$/\1/p" output > actual
          echo "REVOKED" > expected
          diff expected actual

      - name: Check CRL after user 2 cert revocation
        run: |
          # there should be one revoked cert
          docker exec pki pki-server ca-crl-record-show MasterCRL | tee output

          sed -n \
              -e '/^\s*CRL Number:/p' \
              -e '/^\s*CRL Size:/p' \
              output > actual

          cat > expected << EOF
            CRL Number: 0x4
            CRL Size: 1
          EOF

          diff expected actual

          docker exec pki pki-server ca-crl-record-cert-find MasterCRL | tee output

          sed -n \
              -e '/^\s*Serial Number:/p' \
              -e '/^\s*Reason:/p' \
              output > actual

          CERT_ID=$(cat cert.id)
          cat > expected << EOF
            Serial Number: $CERT_ID
            Reason: CERTIFICATE_HOLD
          EOF

          diff expected actual

      - name: Wait for user 2 cert expiration
        run: |
          sleep 120

          CERT_ID=$(cat cert.id)
          docker exec pki pki ca-cert-show $CERT_ID | tee output

          # cert should be revoked and expired
          sed -n "s/^ *Status: \(.*\)$/\1/p" output > actual
          echo "REVOKED_EXPIRED" > expected
          diff expected actual

      - name: Force CRL update after user 2 cert expiration
        run: |
          # force CRL update
          docker exec pki pki -n caadmin ca-crl-update

          # wait for CRL update
          sleep 10

      - name: Check CRL after user 2 cert expiration
        run: |
          # there should be no revoked certs
          docker exec pki pki-server ca-crl-record-show MasterCRL | tee output

          sed -n \
              -e '/^\s*CRL Number:/p' \
              -e '/^\s*CRL Size:/p' \
              output > actual

          cat > expected << EOF
            CRL Number: 0x5
            CRL Size: 0
          EOF

          diff expected actual

          docker exec pki pki-server ca-crl-record-cert-find MasterCRL | tee output

          diff /dev/null output

      - name: Remove CA
        run: docker exec pki pkidestroy -s CA -v

      - name: Check PKI server systemd journal
        if: always()
        run: |
          docker exec pki journalctl -x --no-pager -u pki-tomcatd@pki-tomcat.service

      - name: Check CA debug log
        if: always()
        run: |
          docker exec pki find /var/lib/pki/pki-tomcat/logs/ca -name "debug.*" -exec cat {} \;
